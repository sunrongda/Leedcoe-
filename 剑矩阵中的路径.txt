public class Solution {
    public boolean hasPath(char[] matrix, int rows, int cols, char[] str)
    {
        boolean [] flag = new boolean[matrix.length];

        for(int i =0 ; i < rows; i++)
        {
            for(int j = 0 ; j < cols; j++)
            {
                if(hasPath(matrix , rows , cols , str , i ,j ,flag ,0))
                {
                    return true;
                }
            }

        }
        return false;
    }
    public boolean hasPath(char[] matrix ,int rows, int cols , char [] str,int i ,int j, boolean [] flag ,int k)
    {
        int index = i*cols + j;
        if(i < 0 || i>= rows || j < 0 || j >= cols  || matrix[index] != str[k] || flag[index] == true)
        {
            return false;
        }
        if(k == str.length -1)
        {
            return true;
        }
        flag[index] = true;
        if(hasPath(matrix , rows , cols , str , i + 1,j ,flag ,k + 1) ||
            hasPath(matrix , rows , cols , str , i - 1,j ,flag ,k + 1) ||
            hasPath(matrix , rows , cols , str , i ,j -1 ,flag ,k + 1) ||
            hasPath(matrix , rows , cols , str , i ,j +1 ,flag ,k + 1) )
        {
            return true;
        }
        flag[index] = false;
        return false;
    }
}